{"version":3,"sources":["webpack:///./node_modules/socket.io-parser/build/esm/is-binary.js","webpack:///./node_modules/socket.io-parser/build/esm/binary.js","webpack:///./node_modules/socket.io-parser/build/esm/index.js"],"names":["withNativeArrayBuffer","ArrayBuffer","isView","obj","buffer","Object","prototype","toString","withNativeBlob","Blob","call","withNativeFile","File","isBinary","hasBinary","toJSON","Array","isArray","i","l","length","arguments","key","hasOwnProperty","deconstructPacket","packet","buffers","packetData","data","pack","_deconstructPacket","attachments","placeholder","_placeholder","num","push","newData","Date","reconstructPacket","_reconstructPacket","undefined","protocol","PacketType","type","EVENT","ACK","this","encodeAsString","BINARY_EVENT","BINARY_ACK","encodeAsBinary","str","nsp","id","JSON","stringify","deconstruction","unshift","super","decodeString","reconstructor","emitReserved","base64","Error","takeBinaryData","p","Number","charAt","start","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","CONNECT","DISCONNECT","CONNECT_ERROR","finishedReconstruction","parse","e","reconPack","binData"],"mappings":"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","file":"js/npm.socket.io-parser.815e5698.js","sourcesContent":["const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder) {\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"sourceRoot":""}